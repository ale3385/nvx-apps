<?xml version="1.0"?>
<model xmlns="http://www.neeveresearch.com/schema/x-ddl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!--
        The platform domain descriptor describes an entire deployment domain.

        At a high level a deployment is made up of application that are hosted
        in Talon XVMs (aka servers). This document has 4 main sections:

        1. <env>
        The env allows specification of global properties that are used
        to configure the platform as well as applications that query
        XRuntime configuration.

        2. <buses>
        Applications communicate via via messages that are transmitted
        over a message bus channels (named conduit for messages). The buses
        section defines these channels along with a concrete binding via
        a url descriptor that is used by application to create a physical
        bus connection.

        If the bus descriptor is substitutable via configuration as it is in
        this application then the bus implementation can be changed, so at
        runtime the same application can be run over a loopback bus, jms
        solace etc.

        When using Hornet, bus channels are not typically defined in this
        deployment descriptor, but are instead defined in service definitions
        that map message types to channels that are created dynamically at
        runtime. So for this application channels definitions can be found
        in src/main/resources/services.

        3. <apps>
        The apps in the deployment are configured in this section. An application
        defines the main application class. If multiple instances of an application
        are launched in the same domain they will form via their configured
        stores, and one instance will assume the primary role and replicate data
        to it.

        In this application the ems apps define stores meaning that the
        ems apps in servers ems1 and ems2 will form a cluster. The client and
        market apps which act as drivers for the ems aren't configured for
        storage and operate in a standalone transient fashion.

        4. <servers>
        The servers elements define the vms for the deployment. A server
        hosts an application and controls its lifecycle. A server also provide
        remote management capabilities which allow tools such as Robin to connnect
        to servers to monitor and mange the application being hosted.

        A server will broadcast itself over the configured discovery provider which
        allows tools to discover running servers. Servers also provide the transport
        layer for the p2p bus binding by server as endpoints for p2p application
        connectivity.

    -->
    <env>
        <nv>
            <checked>false</checked>
            <aep>
                <enablesendcommitcompletesequencealerts>false</enablesendcommitcompletesequencealerts>
                <!--
                    Event scheduling:
                    Prioritize store commit completion and messages above other events.
                -->
                <schedulestorecommitcompletionevents>true</schedulestorecommitcompletionevents>
                <schedulesendcommitcompletionevents>true</schedulesendcommitcompletionevents>
                <messageeventpriority>-5</messageeventpriority>
                <storecommitcompletioneventpriority>-30</storecommitcompletioneventpriority>
                <sendcommitcompletioneventpriority>0</sendcommitcompletioneventpriority>
                <duplicate.checking>false</duplicate.checking>
            </aep>

            <!-- Enable Stats -->
            <msg.latency.stats>true</msg.latency.stats>
            <msgtype.latency.stats>false</msgtype.latency.stats>
            <latencymanager.samplesize>10240</latencymanager.samplesize>
            <ods.latency.stats>true</ods.latency.stats>
            <nv.link.network.stampiots>true</nv.link.network.stampiots>

            <!-- Server Stats -->
            <server>
                <stats>
                    <enable>true</enable>
                    <interval>5000</interval>
                    <includeSeries>true</includeSeries>
                    <includeSeriesDataPoints>false</includeSeriesDataPoints>
                </stats>
            </server>

            <aep>
                <ems>
                    <latency.stats>true</latency.stats>
                    <event.latency.stats>false</event.latency.stats>
                    <msgtype.stats>false</msgtype.stats>
                    <stats.interval>0</stats.interval>
                </ems>
            </aep>
        </nv>

        <!-- Trace -->
        <nv.server.stats.pool.trace>info</nv.server.stats.pool.trace>
        <nv.server.stats.userstats.trace>debug</nv.server.stats.userstats.trace>
        <nv.aep.msg.trace.enable>false</nv.aep.msg.trace.enable>
        <!-- <nv.aep.msg.trace>debug</nv.aep.msg.trace> -->
        <nv.toa.trace>info</nv.toa.trace>
        <client.trace>info</client.trace>
        <market.trace>info</market.trace>
        <ems.trace>info</ems.trace>
    </env>

    <buses>
        <bus name="ems" descriptor="${EMS_BUSDESCRIPTOR::p2p://ems}&amp;threadaffinity=1">
            <channels>
            </channels>
        </bus>
        <bus name="market" descriptor="${MARKET_BUSDESCRIPTOR::p2p://market}&amp;threadaffinity=1">
            <channels>
            </channels>
        </bus>
    </buses>
    <apps>
        <app name="ems" mainClass="com.neeve.tick2trade.App">
            <messaging>
                <bus name="ems">
                    <nonBlockingInboundMessageDispatch>${EMS_EMSNONBLOCKINGMESSAGEDISPATCH::false}</nonBlockingInboundMessageDispatch>
                    <detachedSend enabled="${EMS_EMSDETACHEDSEND::true}">
                        <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                        <queueWaitStrategy>${EMS_EMSDETACHEDSEND_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${EMS_EMSDETACHEDSENDCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedSend>
                </bus>
                <bus name="market" enabled="${MARKET_BUS_ENABLED::true}">
                    <nonBlockingInboundMessageDispatch>${EMS_MARKETNONBLOCKINGMESSAGEDISPATCH::true}</nonBlockingInboundMessageDispatch>
                    <detachedSend enabled="${EMS_MARKETDETACHEDSEND::true}">
                        <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                        <queueWaitStrategy>${EMS_MARKETDETACHEDSEND_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${EMS_MARKETDETACHEDSENDCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedSend>
                </bus>
            </messaging>
            <inboundEventMultiplexing>
                <queueDepth>1024</queueDepth>
                <queueOfferStrategy>MultiThreadedSufficientCores</queueOfferStrategy>
                <queueWaitStrategy>${EMS_INPUTMUTIPLEXER_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                <queueDrainerCpuAffinityMask>${EMS_INPUTMUTIPLEXERCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
            </inboundEventMultiplexing>
            <storage enabled="${EMS_STORE_ENABLED::true}">
                <persistenceQuorum>${EMS_PERSISTENCEQUORUM::2}</persistenceQuorum>
                <clustering enabled="${EMS_CLUSTERING_ENABLED::true}">
                    <localIfAddr>${EMS_REPLICATION_INTERFACE::localhost}</localIfAddr>
                    <localPort>${EMS_REPLICATION_PORT::12000}</localPort>
                    <linkParams>nativeio=true,eagerread=true,maxreadspintime=1000000</linkParams>
                    <linkReaderCpuAffinityMask>${EMS_STORE_LINK_READER_CPUAFFMASK::0}</linkReaderCpuAffinityMask>
                    <detachedSend enabled="${EMS_STORE_DETACHEDSEND_ENABLED::false}">
                        <queueDepth>${EMS_STORE_DETACHEDSEND_QUEUEDEPTH::1024}</queueDepth>
                        <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                        <queueWaitStrategy>${EMS_STORE_DETACHEDSEND_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${EMS_STORE_DETACHEDSEND_CPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedSend>
                    <detachedDispatch enabled="${EMS_STORE_DETACHEDDISPATCH_ENABLED::false}">
                        <queueDepth>${EMS_STORE_DETACHEDDISPATCH_QUEUEDEPTH::1024}</queueDepth>
                        <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                        <queueWaitStrategy>${EMS_STORE_DETACHEDDISPATCH_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${EMS_STORE_DETACHEDDISPATCH_CPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedDispatch>
                </clustering>
                <persistence enabled="${EMS_PERSISTER_ENABLED::true}">
                    <flushOnCommit>${EMS_PERSISTERFLUSHONCOMMIT::false}</flushOnCommit>
                    <initialLogLength>${EMS_PERSISTERINITIALLOGLENGTH::10}</initialLogLength>
                    <zeroOutInitial>false</zeroOutInitial>
                    <autoFlushSize>8192</autoFlushSize>
                    <pageSize>8192</pageSize>
                    <detachedPersist enabled="${EMS_DETACHEDPERSISTENABLE::true}">
                        <queueDepth>${EMS_DETACHEDPERSISTQUEUEDEPTH::1024}</queueDepth>
                        <queueOfferStrategy>${EMS_DETACHEDPERSISTQUEUEOFFERSTRATEGY::MultiThreadedSufficientCores}</queueOfferStrategy>
                        <queueWaitStrategy>${EMS_DETACHEDPERSIST_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${EMS_DETACHEDPERSISTCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedPersist>
                </persistence>
            </storage>
            <outboundMessageLogging policy="${EMS_OUTBOUND_LOGGING_POLICY::Off}">
                <flushOnCommit>false</flushOnCommit>
                <detachedWrite enabled="${EMS_OUTBOUND_DETACHEDPERSIST::true}">
                    <queueDepth>1024</queueDepth>
                    <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                    <queueWaitStrategy>${EMS_OUTBOUND_DETACHEDPERSIST_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                    <queueDrainerCpuAffinityMask>${EMS_OUTBOUND_DETACHEDPERSISTCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                </detachedWrite>
            </outboundMessageLogging>
            <replicationPolicy>${EMS_REPLICATIONPOLICY::Pipelined}</replicationPolicy>
            <replicateInParallel>true</replicateInParallel>
            <disposeOnSend>true</disposeOnSend>
        </app>

        <app name="market" mainClass="com.neeve.tick2trade.driver.Market">
            <messaging>
                <bus name="market" enabled="${MARKET_BUS_ENABLED::true}">
                    <nonBlockingInboundMessageDispatch>${MARKET_MARKETNONBLOCKINGMESSAGEDISPATCH::false}</nonBlockingInboundMessageDispatch>
                    <detachedSend enabled="${MARKET_MARKETDETACHEDSEND::true}">
                        <queueOfferStrategy>SingleThreaded</queueOfferStrategy>
                        <queueWaitStrategy>${MARKET_MARKETDETACHEDSEND_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                        <queueDrainerCpuAffinityMask>${MARKET_MARKETDETACHEDSENDCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
                    </detachedSend>
                </bus>
            </messaging>
            <inboundEventMultiplexing>
                <queueDepth>1024</queueDepth>
                <queueOfferStrategy>MultiThreadedSufficientCores</queueOfferStrategy>
                <queueWaitStrategy>${MARKET_INPUTMUTIPLEX_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                <queueDrainerCpuAffinityMask>${MARKET_INPUTMUTIPLEXERCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
            </inboundEventMultiplexing>
            <storage enabled="false">
                <clustering enabled="false" />
            </storage>
            <disposeOnSend>true</disposeOnSend>
        </app>

        <app name="client" mainClass="com.neeve.tick2trade.driver.Client">
            <messaging>
                <bus name="ems">
                    <detachedSend enabled="false" />
                </bus>
            </messaging>
            <sequenceUnsolicitedSends>true</sequenceUnsolicitedSends>
            <inboundEventMultiplexing>
                <queueDepth>1024</queueDepth>
                <queueOfferStrategy>MultiThreadedSufficientCores</queueOfferStrategy>
                <queueWaitStrategy>${CLIENT_INPUTMUTIPLEX_WAIT_STRATEGY::BusySpin}</queueWaitStrategy>
                <queueDrainerCpuAffinityMask>${CLIENT_INPUTMUTIPLEXERCPUAFFMASK::0}</queueDrainerCpuAffinityMask>
            </inboundEventMultiplexing>
            <storage enabled="false">
                <clustering enabled="false" />
            </storage>
            <disposeOnSend>true</disposeOnSend>
        </app>
    </apps>

    <servers>
        <server name="ems1" group="default">
            <apps>
                <app name="ems" autoStart="true" />
            </apps>
            <acceptors>
                <acceptor descriptor="${EMS1_ACCEPTOR::tcp://0.0.0.0:0}" />
            </acceptors>
            <multiThreading enabled="true">
                <ioThreads>
                    <ioThread id="0" affinity="0" enabled="true" />
                    <ioThread id="1" affinity="${EMS1_IOTHRCPUAFFMASK::0}" enabled="true" />
                </ioThreads>
            </multiThreading>
        </server>

        <server name="ems2" group="default">
            <apps>
                <app name="ems" autoStart="true" />
            </apps>
            <acceptors>
                <acceptor descriptor="${EMS2_ACCEPTOR::tcp://0.0.0.0:0}" />
            </acceptors>
            <multiThreading enabled="true">
                <ioThreads>
                    <ioThread id="0" affinity="0" enabled="true" />
                    <ioThread id="1" affinity="${EMS2_IOTHRCPUAFFMASK::0}" enabled="true" />
                </ioThreads>
            </multiThreading>
        </server>

        <server name="market" group="default">
            <apps>
                <app name="market" autoStart="true" />
            </apps>
            <acceptors>
                <acceptor descriptor="${MARKET_ACCEPTOR::tcp://0.0.0.0:0}" />
            </acceptors>
            <multiThreading enabled="true">
                <ioThreads>
                    <ioThread id="0" affinity="0" enabled="true" />
                    <ioThread id="1" affinity="${MARKET_IOTHRCPUAFFMASK::0}" enabled="true" />
                </ioThreads>
            </multiThreading>
        </server>

        <server name="client" group="default">
            <apps>
                <app name="client" autoStart="true" />
            </apps>
            <acceptors>
                <acceptor descriptor="${CLIENT_ACCEPTOR::tcp://0.0.0.0:0}" />
            </acceptors>
            <multiThreading enabled="true">
                <ioThreads>
                    <ioThread id="0" affinity="0" enabled="true" />
                    <ioThread id="1" affinity="${CLIENT_IOTHRCPUAFFMASK::0}" enabled="true" />
                </ioThreads>
            </multiThreading>
        </server>
    </servers>
</model>